---
import "@fontsource-variable/roboto-mono"
import robotoMonoWoff2 from "@fontsource-variable/roboto-mono/files/roboto-mono-latin-wght-normal.woff2?url"
import "@fontsource-variable/mulish"
import mulishWoff2 from "@fontsource-variable/mulish/files/mulish-latin-wght-normal.woff2?url"
import "@fontsource/anton"
import antonWoff2 from "@fontsource/anton/files/anton-latin-400-normal.woff2?url"
import "@fontsource/erica-one"
import { COLORS } from "@constants/colors"
import ericaOneWoff2 from "@fontsource/erica-one/files/erica-one-latin-400-normal.woff2?url"
import SpeedInsights from "@vercel/speed-insights/astro"

// import { ViewTransitions } from "astro:transitions"

interface Props {
  title?: string
}

const { title } = Astro.props

const pageTitle = title ? `${title} | Loopy Demos` : "Loopy Demos"
---

<!doctype html>
<html
  lang="en"
  class="bg-loopydemos-background bg-noise text-loopydemos-text antialiased bg-blend-hard-light"
>
  <head>
    <!-- <ViewTransitions /> -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="theme-color" content={COLORS.primary} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={robotoMonoWoff2}
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={mulishWoff2}
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={antonWoff2}
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      as="font"
      type="font/woff2"
      href={ericaOneWoff2}
      crossorigin="anonymous"
    />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <slot name="head" />
  </head>
  <body>
    <slot />
    <SpeedInsights />
  </body>
</html>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );

    --loopydemos-primary: #8958ff;
    --loopydemos-secondary: #252253;
    --loopydemos-background: #1b191f;
    --loopydemos-primary-highlight: #5cf5f5;
    --loopydemos-secondary-highlight: #ff46d5;
    --loopydemos-tertiary-highlight: #f8f859;
    --loopydemos-text: #f8f8f2;
    --loopydemos-success: #0a100b;
    --loopydemos-error: #ff6553;
    --loopydemos-orange: #ffb86c;
    --loopydemos-subdued: #bcc2cd;
    --loopydemos-black: #121212;
  }

  ::selection {
    @apply bg-loopydemos-highlight-secondary text-loopydemos-black;
  }

  :focus-visible {
    @apply rounded-lg outline outline-4 outline-offset-4 outline-loopydemos-highlight-secondary;
  }

  html {
    scrollbar-width: thin;
    scrollbar-color: theme(colors.loopydemos-highlight-primary.DEFAULT)
      theme(colors.loopydemos-background.DEFAULT);
  }

  body {
    ::-webkit-scrollbar {
      width: 12px;
    }

    ::-webkit-scrollbar-track {
      background: theme(colors.loopydemos-background.DEFAULT);
    }

    ::-webkit-scrollbar-thumb {
      background-color: theme(colors.loopydemos-highlight-primary.DEFAULT);
      border-radius: 6px;
      border: 3px solid theme(colors.loopydemos-background.DEFAULT);
    }
  }

  main {
    h2,
    h3,
    h4,
    h5,
    h6 {
      @apply break-words font-display font-normal tracking-wide text-loopydemos-highlight-secondary;
    }
    h2 {
      @apply my-6 text-3xl sm:text-4xl;
    }

    h3 {
      @apply mb-4 mt-12 text-xl sm:text-2xl;
    }

    h4 {
      @apply mb-2 mt-8 text-xl;
    }

    strong {
      @apply font-black text-loopydemos-highlight-tertiary;
    }

    p {
      @apply my-4 text-base sm:text-lg md:text-xl;
    }

    ul:not(.list-none) {
      @apply list-outside list-image-[url('/plec.svg')] pl-5;

      li {
        @apply pb-2 pl-2 text-base sm:text-lg md:text-xl;
      }
    }

    a:not(.link-none) {
      @apply font-black text-loopydemos-highlight-primary underline underline-offset-2;
      text-decoration-thickness: 2px;
    }
  }

  footer {
    a {
      @apply text-loopydemos-highlight-primary;
    }
  }

  /* CUSTOM CLASSES */
  @layer components {
    .cba-dip-switch {
      background: #898989;
      position: relative;
      width: var(--width);
      height: var(--height);

      z-index: 0;

      &:before {
        content: " ";
        width: var(--nippleWidth);
        height: var(--nippleHeight);
        position: absolute;
        left: calc((var(--width) - var(--nippleWidth)) / 2);
        bottom: 0;

        background: #fefcfd;
        z-index: 1;
        transition: transform ease-in 0.2s;
      }

      &.flipped {
        &:before {
          transform: translateY(-100%);
        }
      }
    }

    .blinking-led {
      animation: var(--blinkTime) ease-in-out var(--blinkOffset) infinite blink;

      &.mood-blink {
        animation: var(--blinkTime) cubic-bezier(0, 1, 0, 1) infinite microblink;
      }
    }

    @keyframes blink {
      0% {
        opacity: 1;
      }
      50% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }

    @keyframes microblink {
      0% {
        opacity: 0;
      }
      20% {
        opacity: 1;
      }
      100% {
        opacity: 1;
      }
    }
  }

  @layer utilities {
    .content-wrapper {
      @apply mx-auto max-w-3xl overflow-x-clip px-6 md:px-8;
    }

    .custom-scrollbar {
      overflow-x: auto;
      overflow-y: hidden;
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
      scrollbar-width: none;
      scrollbar-color: transparent transparent;

      &::-webkit-scrollbar {
        display: none;
      }
    }
  }
</style>

<script is:inline>
  // remove all cache from the browser
  window.addEventListener("load", () => {
    caches.keys().then(cacheNames => {
      cacheNames.forEach(cacheName => {
        caches.delete(cacheName)
      })
    })

    navigator.serviceWorker.getRegistrations().then(registrations => {
      registrations.forEach(registration => {
        registration.unregister()
      })
    })
  })
</script>
