---
import { Image } from "astro:assets"
import { type CollectionEntry, getEntry } from "astro:content"
import DateTag from "@components/date-tag.astro"
import { getImageAltFromSlug } from "@utils/get-image-alt-from-slug"
import { getImageSrcFromSlug } from "@utils/get-image-src-from-slug"
import { getPedalsFromPresets } from "@utils/get-pedals-from-presets"
import { getStaticPedalData } from "@utils/get-static-pedal-data"
import { Icon } from "astro-icon/components"

interface Props
  extends Pick<
    CollectionEntry<"posts">["data"],
    "excerpt" | "title" | "date" | "tags"
  > {
  slug: CollectionEntry<"posts">["slug"]
}

const { title, excerpt, date, slug, tags } = Astro.props

const presetsFromPost: CollectionEntry<"presets"> | undefined = await getEntry(
  "presets",
  `${slug as CollectionEntry<"demos">["slug"]}.presets`,
)

let hasTeaser = true
let pedals: string[] = []
let collageGridElementSize = "5rem"
const teaserDimensions = { width: 224, height: 224 } // Default 1:1 for teaser images
let pedalDimensions: { width: number; height: number }[] = []

if (presetsFromPost) {
  pedals = getPedalsFromPresets(presetsFromPost.data.presets)

  if (pedals.length > 0) {
    hasTeaser = false
    // Get actual pedal dimensions for collage
    const staticPedalData = await getStaticPedalData(pedals)
    pedalDimensions = staticPedalData.map(({ width, height }) => ({
      width: 108,
      height: Math.round((height / width) * 108),
    }))
  }

  if (pedals.length > 4) {
    collageGridElementSize = "4rem"
  }

  if (pedals.length > 8) {
    collageGridElementSize = "3rem"
  }
}

const EXCERPT_LENGTH = 20

const shortenedExcerpt =
  excerpt.split(" ").length > EXCERPT_LENGTH
    ? [...excerpt.split(" ").slice(0, EXCERPT_LENGTH), "..."].join(" ")
    : excerpt
---

<article id="slug" class="mb-12">
  <a href={`/posts/${slug}`} class="link-none flex flex-col gap-2">
    <div class="flex items-start gap-4 sm:items-stretch">
      <div
        class="flex min-h-40 w-40 shrink-0 items-center justify-center rounded-lg bg-loopydemos-secondary p-2 sm:min-h-60 sm:w-60"
      >
        {
          hasTeaser ? (
            <Image
              src={getImageSrcFromSlug(slug)}
              alt={title}
              width={teaserDimensions.width}
              height={teaserDimensions.height}
              class="h-auto w-36 object-contain object-top sm:w-56"
              fit="contain"
              layout="constrained"
              format="avif"
            />
          ) : (
            <div class="pedal-collage-grid h-auto w-36 sm:w-56">
              {pedals.map((pedal, index) => (
                <div class="flex h-full items-center justify-center">
                  <Image
                    width={pedalDimensions[index].width}
                    height={pedalDimensions[index].height}
                    src={getImageSrcFromSlug(pedal)}
                    alt={getImageAltFromSlug(pedal)}
                    class="max-h-full w-auto"
                    fit="contain"
                    layout="constrained"
                    format="avif"
                  />
                </div>
              ))}
            </div>
          )
        }
      </div>
      <div class="flex flex-col justify-between gap-4">
        <div class="flex flex-col gap-2">
          <h4 class="m-0">{title}</h4>
          <div class="text-sm">
            <DateTag {date} />
          </div>
          <p class="m-0 text-sm xs:text-base sm:text-lg">
            {shortenedExcerpt}
          </p>
        </div>
        <div class="hidden flex-col items-end gap-4 sm:flex">
          <span
            class="flex items-center gap-2 text-lg font-black text-loopydemos-highlight-primary"
          >
            <span class="whitespace-nowrap">Read on</span>
            <Icon name="ph:arrow-right-bold" />
          </span>
          <div class="flex flex-wrap justify-end gap-1">
            {
              tags?.map(tag => (
                <span class="whitespace-nowrap rounded-md bg-loopydemos-secondary px-2 py-2 text-sm text-loopydemos-subdued">
                  {tag}
                </span>
              ))
            }
          </div>
        </div>
      </div>
    </div>
    <div class="flex items-center justify-between gap-4 sm:hidden">
      <div class="flex flex-wrap gap-1">
        {
          tags?.map(tag => (
            <span class="whitespace-nowrap rounded-md bg-loopydemos-secondary px-2 py-2 text-sm text-loopydemos-subdued">
              {tag}
            </span>
          ))
        }
      </div>
      <span
        class="flex items-center gap-2 text-lg font-black text-loopydemos-highlight-primary"
      >
        <span class="whitespace-nowrap">Read on</span>
        <Icon name="ph:arrow-right-bold" />
      </span>
    </div>
  </a>
</article>

<style define:vars={{ size: collageGridElementSize }}>
  .pedal-collage-grid {
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(
      auto-fit,
      minmax(calc(var(--size) * 0.8), 1fr)
    );
    grid-auto-rows: calc(var(--size) * 0.8);

    @media (min-width: 640px) {
      & {
        grid-template-columns: repeat(auto-fit, minmax(var(--size), 1fr));
        grid-auto-rows: var(--size);
      }
    }
  }
</style>
