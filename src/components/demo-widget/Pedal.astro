---
import { getImageFromSlug } from "@utils/get-image-from-slug"
import { type PedalProps } from "@types"
import { Image } from "astro:assets"
import { getEntry, type CollectionEntry } from "astro:content"
import {
  POTRAIT_DEFAULT_ENCLOSURE,
  LANDSCAPE_DEFAULT_ENCLOSURE,
} from "@constants/sizes"
import Knob from "@components/knob"
import AbsolutePosition from "@components/absolute-position.astro"
import { Switch } from "@components/switch"
import { Led } from "@components/led"

type Props = PedalProps

const { slug, model, builder } = Astro.props

const pedalData: CollectionEntry<"pedals"> = await getEntry(
  "pedals",
  `${slug}.pedal`
)

if (!pedalData) {
  throw new Error(`Pedal not found: ${slug}`)
}

const { controls, width, height, enclosure, name } = pedalData.data

const enclosureWidth =
  width ||
  (enclosure === "landscape"
    ? LANDSCAPE_DEFAULT_ENCLOSURE.width
    : POTRAIT_DEFAULT_ENCLOSURE.width)
const enclosureHeight =
  height ||
  (enclosure === "landscape"
    ? LANDSCAPE_DEFAULT_ENCLOSURE.height
    : POTRAIT_DEFAULT_ENCLOSURE.height)
---

<div
  class="relative box-border select-none"
  style={{
    width: `${enclosureWidth}px`,
    height: `${enclosureHeight}px`,
  }}
>
  <Image
    src={getImageFromSlug(slug)}
    alt={`${model} - ${builder}`}
    class="absolute h-full w-full object-contain"
  />
  <div class="relative h-full w-full">
    {
      controls?.knobs?.map((knob) => (
        <AbsolutePosition id={knob.id} {...knob.position}>
          <Knob {...knob} />
        </AbsolutePosition>
      ))
    }
    {
      controls?.switches?.map((switchEl) => (
        <AbsolutePosition id={switchEl.id} {...switchEl.position}>
          <Switch client:load {...switchEl} pedalId={name} />
        </AbsolutePosition>
      ))
    }
    {
      controls?.leds?.map((led) => (
        <AbsolutePosition id={led.id} {...led.position}>
          <Led client:load {...led} pedalId={name} />
        </AbsolutePosition>
      ))
    }
  </div>
</div>
