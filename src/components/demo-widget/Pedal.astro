---
import { getImageFromSlug } from "@utils/get-image-from-slug"
import { type PedalProps } from "@types"
import { Image } from "astro:assets"
import { getEntry, type CollectionEntry } from "astro:content"
import {
  POTRAIT_DEFAULT_ENCLOSURE,
  LANDSCAPE_DEFAULT_ENCLOSURE,
} from "@constants/sizes"
import Knob from "@components/knob"
import AbsolutePosition from "@components/absolute-position.astro"
import { Switch } from "@components/switch"
import Led from "@components/led"

type Props = PedalProps

const { slug, model, builder } = Astro.props

const pedalData: CollectionEntry<"pedals"> = await getEntry(
  "pedals",
  `${slug}.pedal`
)

if (!pedalData) {
  throw new Error(`Pedal not found: ${slug}`)
}

const { controls, width, height, enclosure, name } = pedalData.data

const enclosureWidth =
  width ||
  (enclosure === "landscape"
    ? LANDSCAPE_DEFAULT_ENCLOSURE.width
    : POTRAIT_DEFAULT_ENCLOSURE.width)
const enclosureHeight =
  height ||
  (enclosure === "landscape"
    ? LANDSCAPE_DEFAULT_ENCLOSURE.height
    : POTRAIT_DEFAULT_ENCLOSURE.height)
---

<div
  class="relative box-border select-none"
  style={{
    width: `${enclosureWidth}px`,
    height: `${enclosureHeight}px`,
  }}
>
  <Image
    src={getImageFromSlug(slug)}
    alt={`${model} - ${builder}`}
    class="absolute h-full w-full object-contain"
  />
  <div class="relative h-full w-full">
    {
      controls?.knobs?.map(
        ({ id, type, position, size, colors, isRotary, rotaryAngles }) => (
          <AbsolutePosition {id} {...position}>
            <Knob {id} {type} {size} {colors} {isRotary} {rotaryAngles} />
          </AbsolutePosition>
        )
      )
    }
    {
      controls?.switches?.map(
        ({
          id,
          type,
          position,
          size,
          orientation,
          isMomentary,
          secondaryCircuitId,
        }) => (
          <AbsolutePosition {id} {...position}>
            <Switch
              client:load
              {id}
              {type}
              {size}
              {orientation}
              {isMomentary}
              {secondaryCircuitId}
              pedalId={name}
            />
          </AbsolutePosition>
        )
      )
    }
    {
      controls?.leds?.map(
        ({
          id,
          position,
          size,
          colors,
          type,
          defaultTime,
          blinkOffset,
          offOverride,
          dependency,
          isBlinking,
        }) => (
          <AbsolutePosition {id} {...position}>
            <Led
              {id}
              {size}
              {colors}
              {type}
              {defaultTime}
              {blinkOffset}
              {offOverride}
              {dependency}
              {isBlinking}
              pedalId={name}
            />
          </AbsolutePosition>
        )
      )
    }
  </div>
</div>
