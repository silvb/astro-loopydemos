---
import { getImageSrcFromSlug } from "@utils/get-image-src-from-slug"
import { Image } from "astro:assets"
import { getEntry, type CollectionEntry } from "astro:content"
import {
  POTRAIT_DEFAULT_ENCLOSURE,
  LANDSCAPE_DEFAULT_ENCLOSURE,
} from "@constants/sizes"
import Knob from "@components/knob"
import AbsolutePosition from "@components/absolute-position.astro"
import { Switch } from "@components/switch"
import { Led } from "@components/led"
import { PedalStateContainer } from "./pedal-state-container"
import { getImageAltFromSlug } from "@utils/get-image-alt-from-slug"
import SweepIndicator from "@components/sweep-indicator.astro"
import LineLabel from "@components/line-label"
import Slider from "@components/slider"
import MomentaryIndicator from "@components/momentary-indicator.astro"

interface Props {
  slug: string
}

const { slug } = Astro.props

const pedalData: CollectionEntry<"pedals"> = await getEntry(
  "pedals",
  `${slug as CollectionEntry<"demos">["slug"]}.pedal`
)

if (!pedalData) {
  throw new Error(`Pedal not found: ${slug}`)
}

const { controls, width, height, enclosure, imageSrcSlug } = pedalData.data

const enclosureWidth =
  width ||
  (enclosure === "landscape"
    ? LANDSCAPE_DEFAULT_ENCLOSURE.width
    : POTRAIT_DEFAULT_ENCLOSURE.width)
const enclosureHeight =
  height ||
  (enclosure === "landscape"
    ? LANDSCAPE_DEFAULT_ENCLOSURE.height
    : POTRAIT_DEFAULT_ENCLOSURE.height)
---

<PedalStateContainer client:load {slug} {enclosureWidth}>
  <div id={slug} class="enclosure">
    <Image
      src={getImageSrcFromSlug(imageSrcSlug ?? slug)}
      alt={getImageAltFromSlug(slug)}
      class="absolute h-full w-full object-contain"
      loading="eager"
    />
    <div class="relative h-full w-full transform">
      {
        controls?.knobs?.map(knob => (
          <AbsolutePosition id={knob.id} {...knob.position}>
            <Knob {...knob} pedalSlug={slug} />
          </AbsolutePosition>
        ))
      }
      {
        controls?.switches?.map(switchEl => (
          <AbsolutePosition id={switchEl.id} {...switchEl.position}>
            <Switch client:load {...switchEl} pedalSlug={slug}>
              <SweepIndicator
                size={switchEl.size}
                color={switchEl.highlightColor}
                slot="sweep-indicator"
              />
              <MomentaryIndicator
                size={switchEl.size}
                slot="momentary-indicator"
              />
            </Switch>
          </AbsolutePosition>
        ))
      }
      {
        controls?.leds?.map(led => (
          <AbsolutePosition id={led.id} {...led.position}>
            <Led client:load {...led} pedalSlug={slug} />
          </AbsolutePosition>
        ))
      }
      {
        controls?.labels?.map(label => (
          <AbsolutePosition id={label.id} {...label.position}>
            <LineLabel {...label} pedalSlug={slug} />
          </AbsolutePosition>
        ))
      }
      {
        controls?.sliders?.map(slider => (
          <AbsolutePosition id={slider.id} {...slider.position}>
            <Slider {...slider} pedalSlug={slug} />
          </AbsolutePosition>
        ))
      }
    </div>
  </div>
</PedalStateContainer>

<style
  define:vars={{
    width: `${enclosureWidth}px`,
    height: `${enclosureHeight}px`,
  }}
>
  .enclosure {
    @apply relative box-border select-none;
    width: calc(var(--width) * 0.75);
    height: calc(var(--height) * 0.75);

    @media (min-width: theme(screens.sm)) {
      & {
        width: var(--width);
        height: var(--height);
      }
    }
  }
</style>
