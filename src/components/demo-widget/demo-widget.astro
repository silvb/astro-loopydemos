---
import { getEntry, type CollectionEntry } from "astro:content"

import { getPedalsFromPresets } from "@utils/get-pedals-from-presets"
import {
  LANDSCAPE_DEFAULT_ENCLOSURE,
  POTRAIT_DEFAULT_ENCLOSURE,
} from "@constants/sizes"
import { getImage } from "astro:assets"
import { getImageSrcFromSlug } from "@utils/get-image-src-from-slug"
import type { StaticPedalData } from "@types"
import { DemoWidgetContainer } from "./demo-widget-container"
import LoadingSkeleton from "./loading-skeleton.astro"

interface Props {
  presetSlug: string
}

const { presetSlug } = Astro.props

const {
  data: { presets, hasBackingTrack, volume, mainPedal },
}: CollectionEntry<"presets"> = await getEntry(
  "presets",
  `${presetSlug as CollectionEntry<"demos">["slug"]}.presets`
)

let pedals = [...new Set(getPedalsFromPresets(presets))]

if (pedals.includes(presetSlug)) {
  pedals.sort(pedal => (pedal === presetSlug ? -1 : 1))
}

if (pedals.length === 0) pedals = [mainPedal || presetSlug]

const isComparison = presets.some(({ comparison }) => Boolean(comparison))

let staticPedalData: StaticPedalData[] = []

for (const pedalSlug of pedals) {
  const pedalData: CollectionEntry<"pedals"> = await getEntry(
    "pedals",
    `${pedalSlug as CollectionEntry<"demos">["slug"]}.pedal`
  )

  if (!pedalData) {
    throw new Error(`Pedal not found: ${pedalSlug}`)
  }

  const { controls, width, height, enclosure, imageSrcSlug, isOneOff } =
    pedalData.data
  const enclosureWidth =
    width ||
    (enclosure === "landscape"
      ? LANDSCAPE_DEFAULT_ENCLOSURE.width
      : POTRAIT_DEFAULT_ENCLOSURE.width)
  const enclosureHeight =
    height ||
    (enclosure === "landscape"
      ? LANDSCAPE_DEFAULT_ENCLOSURE.height
      : POTRAIT_DEFAULT_ENCLOSURE.height)

  const { src: imgSrc, srcSet: imgSrcSet } = await getImage({
    src: getImageSrcFromSlug(imageSrcSlug ?? pedalSlug),
    widths: [enclosureWidth, Math.ceil(enclosureWidth * 0.75)],
  })

  const { src: thumbnailSrc, srcSet: thumbnailSrcSet } = await getImage({
    src: getImageSrcFromSlug(imageSrcSlug ?? pedalSlug),
    widths: [94, 54],
  })

  staticPedalData.push({
    width: enclosureWidth,
    height: enclosureHeight,
    slug: pedalSlug,
    imgSrc,
    imgSrcSet,
    thumbnailSrc,
    thumbnailSrcSet,
    controls,
    isOneOff,
  })
}

const maxHeight = Math.max(...staticPedalData.map(({ height }) => height))
---

<LoadingSkeleton
  pedalHeight={maxHeight}
  {presetSlug}
  {hasBackingTrack}
  {isComparison}
/>
<DemoWidgetContainer
  client:only="solid-js"
  {presets}
  {staticPedalData}
  {isComparison}
  {presetSlug}
  {volume}
  {hasBackingTrack}
  {maxHeight}
/>
