---
import { getEntry, type CollectionEntry } from "astro:content"

import { AudioPlayer } from "./audio-player"
import { Pedal } from "./pedal"
import { PresetsSlider } from "./presets-slider"

import { DemoStateInitializer } from "./demo-state-initializer"
import { ComparisonSlider } from "./comparison-slider"
import { getPedalsFromPresets } from "@utils/get-pedals-from-presets"
import { ScaleFactor } from "./scale-factor"
import {
  LANDSCAPE_DEFAULT_ENCLOSURE,
  POTRAIT_DEFAULT_ENCLOSURE,
} from "@constants/sizes"
import { getImage } from "astro:assets"
import { getImageSrcFromSlug } from "@utils/get-image-src-from-slug"

interface Props {
  presetSlug: string
}

const { presetSlug } = Astro.props

const {
  data: { presets, hasBackingTrack, volume, mainPedal },
}: CollectionEntry<"presets"> = await getEntry(
  "presets",
  `${presetSlug as CollectionEntry<"demos">["slug"]}.presets`
)

let pedals = [...new Set(getPedalsFromPresets(presets))]

if (pedals.includes(presetSlug)) {
  pedals.sort(pedal => (pedal === presetSlug ? -1 : 1))
}

if (pedals.length === 0) pedals = [mainPedal || presetSlug]

const isComparison = presets.some(({ comparison }) => Boolean(comparison))

type StaticPedalData = {
  slug: string
  imgSrc: string
  width: number
  height: number
  controls: CollectionEntry<"pedals">["data"]["controls"]
}

let staticPedalData: StaticPedalData[] = []

for (const pedalSlug of pedals) {
  const pedalData: CollectionEntry<"pedals"> = await getEntry(
    "pedals",
    `${pedalSlug as CollectionEntry<"demos">["slug"]}.pedal`
  )

  if (!pedalData) {
    throw new Error(`Pedal not found: ${pedalSlug}`)
  }

  const { controls, width, height, enclosure, imageSrcSlug } = pedalData.data
  const enclosureWidth =
    width ||
    (enclosure === "landscape"
      ? LANDSCAPE_DEFAULT_ENCLOSURE.width
      : POTRAIT_DEFAULT_ENCLOSURE.width)
  const enclosureHeight =
    height ||
    (enclosure === "landscape"
      ? LANDSCAPE_DEFAULT_ENCLOSURE.height
      : POTRAIT_DEFAULT_ENCLOSURE.height)

  const { src: imgSrc } = await getImage({
    src: getImageSrcFromSlug(imageSrcSlug ?? pedalSlug),
  })

  staticPedalData.push({
    width: enclosureWidth,
    height: enclosureHeight,
    slug: pedalSlug,
    imgSrc,
    controls,
  })
}

const maxHeight = Math.max(...staticPedalData.map(({ height }) => height))
---

<DemoStateInitializer client:idle {presets} {pedals} />
<div class="flex flex-col gap-4">
  <AudioPlayer
    client:only="solid-js"
    slug={presetSlug}
    {hasBackingTrack}
    {volume}
  />
  {
    isComparison && (
      <ComparisonSlider
        client:load
        pedals={staticPedalData.map(({ slug, imgSrc }) => ({ slug, imgSrc }))}
      />
    )
  }
  <PresetsSlider client:load {presets} />
</div>
<ScaleFactor client:only="solid-js">
  <div class="height-limit mb-24 mt-8 flex items-start justify-center">
    {staticPedalData.map(pedalData => <Pedal {...pedalData} client:load />)}
  </div>
</ScaleFactor>

<style
  define:vars={{
    maxHeight: `${maxHeight}px`,
  }}
>
  .height-limit {
    height: calc(var(--maxHeight) * 0.75);
    @media (min-width: theme(screens.sm)) {
      & {
        height: var(--maxHeight);
      }
    }
  }
</style>
