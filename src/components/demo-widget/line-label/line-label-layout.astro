---
import type { LineLabel } from "@types"

interface Props extends LineLabel {
  pedalSlug: string
}

const { id, color, position: start, labelPosition: end, isLong } = Astro.props

const LINE_CAP_RADIUS = 3

const width = Math.max(Math.abs(start.left - end.left), LINE_CAP_RADIUS * 2)
const height = Math.max(Math.abs(start.top - end.top), LINE_CAP_RADIUS * 2)

const isRightAligned = start.left <= end.left
const isTopDown = start.top <= end.top

const startX = isRightAligned ? LINE_CAP_RADIUS : width - LINE_CAP_RADIUS
const startY = isTopDown ? LINE_CAP_RADIUS : height - LINE_CAP_RADIUS

let endX = isRightAligned ? width - LINE_CAP_RADIUS : LINE_CAP_RADIUS
let endY = isTopDown ? height - LINE_CAP_RADIUS : LINE_CAP_RADIUS

let bendX = width / 2
---

<div
  class="line-label-container text-loopydemos-text-themed"
  {id}
  style={{
    transform: `translate(${isRightAligned ? 0 : -100}%, ${isTopDown ? 0 : -100}%)`,
  }}
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    {width}
    {height}
    viewBox={`0 0 ${width} ${height}`}
    class="drop-shadow-md"
  >
    <g fill="none" fill-rule="evenodd">
      <polyline
        fill="none"
        class="stroke-loopydemos-text-themed"
        stroke={color}
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        points={`${startX} ${startY} ${bendX} ${endY} ${endX} ${endY}`}
      ></polyline>
      <circle
        class="fill-loopydemos-text-themed"
        cx={startX}
        cy={startY}
        r={LINE_CAP_RADIUS}
        fill={color}></circle>
      <circle
        class="fill-loopydemos-text-themed"
        cx={endX}
        cy={endY}
        r={LINE_CAP_RADIUS}
        fill={color}></circle>
    </g>
  </svg>
  <span
    id={`line-label-${id}`}
    class:list={[
      "line-label text-xs text-loopydemos-text-themed",
      { "long-width": isLong, "right-aligned": isRightAligned },
    ]}
    style={{
      top: `${endY - LINE_CAP_RADIUS / 2}px`,
      left: `${endX}px`,
    }}
  >
  </span>
</div>

<style>
  .line-label-container {
    transform: translate(var(--translateX), var(--translateY));
    z-index: 30;
    pointer-events: none;

    transform: translateY(-100%);

    .top-down {
      transform: translateY(0);
    }
  }

  .line-label {
    position: absolute;
    padding: 0 0.5rem;
    transform: translate(-100%, -50%);
    text-align: right;
    hyphens: auto;
    min-width: 5rem;
    text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.7);

    &.long-width {
      min-width: 10rem;
    }

    &.right-aligned {
      transform: translate(0, -50%);
      text-align: left;
    }
  }
</style>
