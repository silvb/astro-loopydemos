---
import { type CollectionEntry, getCollection, getEntry } from "astro:content"
import DemoPreviewCard from "@components/demo-preview-card.astro"
import PostPreviewCard from "@components/post-preview-card.astro"
import DemoLayout from "@layouts/demo-layout.astro"
import {
  getImageSrcFromSlug,
  type ImageSrc,
} from "@utils/get-image-src-from-slug"
import { getPedalsFromPresets } from "@utils/get-pedals-from-presets"
import type { GetStaticPaths, InferGetStaticPropsType } from "astro"

export const getStaticPaths = (async () => {
  const allPosts: CollectionEntry<"posts">[] = await getCollection("posts")
  return allPosts.map(post => ({
    params: { slug: post.slug },
    props: { ...post.data, content: post },
  }))
}) satisfies GetStaticPaths

export type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { content, date, title, type, relatedSlugs, tags, excerpt } = Astro.props
const { slug } = Astro.params
const { Content } = await content.render()

const allDemos: CollectionEntry<"demos">[] = await getCollection("demos")
const allPosts: CollectionEntry<"posts">[] = await getCollection("posts")

const presetsEntry: CollectionEntry<"presets"> | undefined = await getEntry(
  "presets",
  `${slug as CollectionEntry<"demos">["slug"]}.presets`,
)

let relatedPedals: string[] = []

if (presetsEntry) {
  const presets = presetsEntry.data.presets
  relatedPedals = [...new Set(getPedalsFromPresets(presets))]
}

const relatedDemos = allDemos.filter(
  demo =>
    demo.data.tags?.some(tag => tags?.includes(tag)) ||
    relatedSlugs?.includes(demo.slug) ||
    demo.data.relatedSlugs?.includes(slug) ||
    relatedPedals.includes(demo.slug),
)

const relatedPosts = allPosts
  .filter(post => post.slug !== slug)
  .filter(post => post.data.tags?.some(tag => tags?.includes(tag)))

let coverImage: ImageSrc | undefined

if (type === "freeform") {
  coverImage = getImageSrcFromSlug(slug)
}
---

<DemoLayout {slug} {title} {date} {type} {excerpt} {coverImage} noIndex={type === "none"}>
  <Content />
  {
    relatedDemos.length > 0 && (
      <>
        <h3>Discover More In-depth Demos</h3>
        <div class="grid auto-rows-[200px] grid-cols-3-min-repeat gap-2">
          {relatedDemos
            .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
            .sort(demo => (relatedSlugs?.includes(demo.slug) ? -1 : 1))
            .sort(demo => (relatedPedals.includes(demo.slug) ? -1 : 1))
            .filter(demo => demo.data.type === "demo")
            .slice(0, 15)
            .map(demo => (
              <DemoPreviewCard
                slug={demo.slug}
                model={demo.data.model}
                builder={demo.data.builder}
              />
            ))}
        </div>
      </>
    )
  }
  {
    relatedPosts.length > 0 && (
      <>
        <h3>Similar Articles</h3>
        <div>
          {relatedPosts
            .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
            .filter(post => ["post", "freeform"].includes(post.data.type))
            .slice(0, 3)
            .map(({ slug, data }) => (
              <PostPreviewCard
                {slug}
                title={data.title}
                date={data.date}
                excerpt={data.excerpt}
                tags={data.tags}
              />
            ))}
        </div>
      </>
    )
  }
</DemoLayout>
