---
import DefaultLayout from "@layouts/default-layout.astro"
import type { GetStaticPaths, InferGetStaticPropsType } from "astro"
import { getCollection, type CollectionEntry, getEntry } from "astro:content"
import SEO from "@layouts/seo.astro"
import { EmbedConfig } from "@components/embed-config"
import { getStaticPedalData } from "@utils/get-static-pedal-data"
import { getPedalsFromPresets } from "@utils/get-pedals-from-presets"
import { EMBED_HEIGHT_OFFSET } from "@constants/sizes"

export const getStaticPaths = (async () => {
  const allDemos: CollectionEntry<"demos">[] = await getCollection("demos")
  return allDemos.map(demo => ({
    params: { slug: demo.slug },
    props: { ...demo.data },
  }))
}) satisfies GetStaticPaths

export type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { model, builder } = Astro.props
const { slug } = Astro.params

const title = `${model} - ${builder}: Embed Widget Configurator`
const frameTitle = `${model} - ${builder} | Loopy Demos`

const isDev = import.meta.env.DEV
const vercelPreviewBranchUrl = "https://" + import.meta.env.VERCEL_BRANCH_URL
const isVercelPreview = import.meta.env.VERCEL_ENV === "preview"

const siteUrl = isDev
  ? Astro.url.origin
  : isVercelPreview
    ? vercelPreviewBranchUrl
    : import.meta.env.SITE

const {
  data: { presets },
}: CollectionEntry<"presets"> = await getEntry(
  "presets",
  `${slug as CollectionEntry<"demos">["slug"]}.presets`
)

const pedalsInDemo = [...new Set([...getPedalsFromPresets(presets), slug])]

const staticPedalData = await getStaticPedalData(pedalsInDemo)

const maxHeight = Math.max(...staticPedalData.map(({ height }) => height))

const minHeight = EMBED_HEIGHT_OFFSET + maxHeight
---

<DefaultLayout {title}>
  <SEO slot="head" noIndex />
  <EmbedConfig
    client:only="solid-js"
    {slug}
    title={frameTitle}
    {siteUrl}
    {minHeight}
  />
</DefaultLayout>
